buildscript {
	// The following repositories are used to fetch the dependencies that our gradle build scripts depend on.
	// These dependencies are put on the classpath of our build and we can refer to them from our build file.
	// Example: such a dependency can be an extra plugin that exists on the internet.
	repositories {
		mavenCentral()
		jcenter()
	}

	dependencies {
		classpath 'com.github.ben-manes:gradle-versions-plugin:0.11.1'
		classpath 'org.akhikhl.gretty:gretty:1.2.1'
	}
}

// The following repositories are used to fetch the dependencies that our Java code depends on.
repositories {
	mavenCentral()
	jcenter()
}


apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'org.akhikhl.gretty'
apply plugin: 'com.github.ben-manes.versions'


sourceCompatibility = 1.8
targetCompatibility = 1.8

version = '0.0.1-SNAPSHOT'

ext {
	springVersion = '4.2.4.RELEASE'
	jacksonVersion = '2.7.0'
}

dependencies {

	// Logging
	compile 'log4j:log4j:1.2.17'

	// Spring
	compile "org.springframework:spring-context:${springVersion}"
	compile "org.springframework:spring-web:${springVersion}"
	compile "org.springframework:spring-webmvc:${springVersion}"
	testCompile "org.springframework:spring-test:${springVersion}"

	// Jackson, JSON
	compile "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
	compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"

	// TestNG
	testCompile 'org.testng:testng:6.9.10'
	testCompile 'org.hamcrest:hamcrest-all:1.3'

	// Injection
	compile 'javax.inject:javax.inject:1'
}

test {
	// Enables TestNG support (default is JUnit)
	useTestNG()

	// Listens to events in the test execution lifecycle
	beforeTest { descriptor ->
		logger.lifecycle("Running test: ${descriptor.className}.${descriptor.name}")
	}

	// Listens to standard out and standard error of the test JVM(s)
	afterTest { descriptor, event ->
		logger.lifecycle("${event.resultType}: test ${descriptor.className}.${descriptor.name} executed")
	}
}

war {
	baseName = getProjectBaseName(project)
}

gretty {
	servletContainer = 'jetty9'

	port = 9090
	contextPath = '/spring-hello'
	
	debugSuspend = false
}


// We should try to work with a single wrapper from within the root dir, not have it in each and every sub-project
task wrapper(type: Wrapper) {

	// The distribution will be unpacked to the $USER_HOME/.gradle/gradle/dists
	archiveBase = Wrapper.PathBase.GRADLE_USER_HOME
	archivePath = 'gradle/dists'
	distributionUrl = 'https://services.gradle.org/distributions/gradle-2.3-all.zip'
}


/**
 * Builds a project base name base on project's path from the root project.
 */
def getProjectBaseName(Project project) {
	String nameWithColonSeparator = rootProject.name + project.path
	return nameWithColonSeparator.replaceAll(':', '-')
}
